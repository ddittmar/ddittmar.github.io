---
layout: post
title:  "jQuery 101"
subtitle: "Grundlagenwissen"
date:   2014-11-04
categories: javascript jquery
tags: jquery basics
og_img: http://static-ddittmar.appspot.com/images/blog/jQuery-Logo.png
og_img-alt: jQuery Logo
og_img-width: 400
og_img-height: 102
show_head_img: true
onDocumentReady: > ###
    $('h2').click(function(e) {
        var text = $(this).text();
        alert(text);
        e.preventDefault();
    });
---
Ich musste gerade wieder feststellen das einige Entwickler noch nicht oder sehr wenig mit jQuery in Berührung gekommen sind. Deshalb hier ein kleine Zusammenfassung um die Grundlagen zu klären. Später vielleicht noch ein paar weiterführende Artikel um fortgeschrittene Themen wie Plugins und ähnliches zu zeigen.

## jQuery?

Falls jemand noch nie etwas von [jQuery](http://jquery.com/) gehört hat:

> jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.

Wie der geneigte Leser bemerkt hat geht es hier um JavaScript. Das gute an jQuery ist das man auch ohne erweiterte JS Kenntnisse sehr weit kommt. Es wird hier also keine Enführung in JS geben. Für eine wirklich sehr gute Einführung empfehle ich das Buch *JavaScript: The Good Parts [Douglas Crockford - 2008]*. Das Buch öffnet einem die Augen (wirklich) und ist auch eher dünn und schnell zu lesen.

## Grundlegendes

Nachdem man jQuery in die HTML-Seite eingebunden hat regestriert jQuery eine Funktionen am globalen Browser-Objekt `window`. Diese Funktion wird unter zwei Namen registriert. Der eine Name ist `jquery` und der andere Name ist `$`. Man kann gerne beide Namen verwenden allerdings ist es üblich die Funktion mit dem Namen `$` zu verwenden. Das heißt das alles was wir weiter unten mit jQuery machen mit der `$` Funktion zu hat.

Da jQuery dazu verwendet wird das HTML-Document zu manuipulieren ist es ratsam erst etwas mit jQuery zu machen wenn das Dokument vom Browser geladen wurde. Da die Macher von jQuery das auch wissen gibt es da natürlich etwas:

{% highlight javascript %}
$(document).ready(function() {
    // Diese Funktion wird ausgeführt wenn der Browser das Dokument geladen hat.
});
{% endhighlight %}

Alles was wir im weitern sehen werden solltet ihr innerhalb dieser Funktion machen (oder zum experimentieren auf der Console).

## Selektion

> The most basic concept of jQuery is to "select some elements and do something with them".

Was jQuery so stark macht ist die Art wie man Elemente im Dokument selektiert. Das konnte vorher so kein Framework und ist die Wunderwaffe in der DOM manipulation.

Selektiert wird mit Hilfe von CSS Selektoren. jQuery unterstützt (fast) alle CSS3 Selektoren auch wenn der Browser den Selektor eigentlich nicht unterstützt. Zusätzlich werden noch ein paar Selektoren unterstützt die nicht mal CSS3 kann.

Wer etwas CSS kann wird sich in den folgenden Beispielen schnell zurecht finden. Die Beispiele können leicht auf dieser Seite in der Entwicklungs-Console des Browsers getestet werden.

Hier werden alle `<h2>` Überschriften selectiert und der enthaltene Text auf `'foobar'` gesetzt:
{% highlight javascript %}
$('h2').text('foobar');
{% endhighlight %}

Oder man versteckt alle `<blockquote>` Elemente auf dieser Seite:
{% highlight javascript %}
$('blockquote').hide();
{% endhighlight %}

Und genau so kann man sie auch wieder sichtbar machen:
{% highlight javascript %}
$('blockquote').show();
{% endhighlight %}

Etwas mehr CSS? Alle Links mit der Klasse `btn` innerhalb eines Wells (Bootstrap) ausblenden (unten die Social-Share Buttons):
{% highlight javascript %}
$('.well a.btn').hide(400);
{% endhighlight %}

Man erkennt leicht das eingangs erwähnte Prinzip von jQuery: "Elemente auswählen und irgendwas mit ihnen machen". Was man auch erkennt ist das jQuery **immer** auf einer Menge aus Elementen operiert (wie CSS auch). Das gilt auch wenn man etwas mit Hilfe der `id` selektiert.

## Methoden

### Operator-Verkettung

jQuery hat die praktische Eigenart das jede Operation die Menge zurück gibt auf der die Operation angewendet wurde. Dadurch kann man sehr gut mehrere Operationen aneinander hängen.

Alle Social-Share Buttons wählen und verstecken; kurz warten und wieder einblenden:
{% highlight javascript %}
$('.well a.btn').hide(400).delay(1000).show(400);
{% endhighlight %}

Ist das cool? Alles in einer Zeile :grin:. Wenn man sich überlegt wie das sonst aussehn müsste:

{% highlight javascript %}
var buttons = $('.well a.btn');
buttons.hide(400);
buttons.delay(1000);
buttons.show(400);
{% endhighlight %}

### Getter und Setter

Eine weitere Eigenart von jQuery ist es das Methoden die eine Eigenschaft eines Elements verändern (fast immer) gleichzeitig als Getter und als Setter funktionieren. Um z.B. den Text des Attributs `href` eines Links abzufragen:
{% highlight javascript %}
$('a.btn-facebook').attr('href');
{% endhighlight %}

Wenn man das Attribut `href` setzen möchte gibt man einfach einen Parameter mehr an:
{% highlight javascript %}
$('a.btn-facebook').attr('href', 'http://google.de');
{% endhighlight %}

Bei Attributen die beim holen keinen Parameter brauchen funktioniert das dann analog:
{% highlight javascript %}
$('.well').height(); // die Höhe des Wells holen
$('.well').height(500); // die Höhe des Wells setzen
{% endhighlight %}

Wenn der Selektor mehrere Treffer geliefert hat, wird beim holen einer Eigenschafft immer nur der Wert des ersten Elements in der Trefferliste zurück gegeben wärend beim setzen alle Elemente in der Trefferliste manipuliert werden:
{% highlight javascript %}
$('a.btn').attr('href'); // liefert den Wert des ersten Links
$('a.btn').attr('href', 'http://foobar.de'); // setzt alle Links
{% endhighlight %}

## Ereignisse

Was wäre eine Webseite ohne Ereignisse wie z.B. das drücken eines Links? Wohl nicht so viel :smile:.

Damit man einfach auf solche Ereignisse reagieren kann, kann man Handler registrieren. Hier als Beispiel ein Click-Handler auf allen `<h2>` Elementen um bei einem Click einen Alert-Dialog anzuzeigen:
{% highlight javascript %}
$('h2').click(function(e) {
    var text = $(this).text();
    alert(text);
    e.preventDefault();
});
{% endhighlight %}
Einfach mal eine `<h2>` Überschrift anklicken der Handler ist auf dieser Seite schon registriert :wink:.

Hier kann man mehrere Dinge sehen:

1. Innerhalb der Handler-Funktion ist `this` das angeklickte Element. `this` ist dabei das DOM Element. Wenn man mit `this` wieder etwas jQuery 'Magie' machen möchte muss man es nochmal in die `$` Funktion einwickeln (so zu sagen).
2. Jeder Event-Handler bekommt das Event-Objekt übergeben. Hier kann man dann z.B. die weiter Ausbreitung des Events verhindern (vergleiche: `e.preventDefault()`).

## und weiter?

Ab hier kann man schon mal auf die excellente jQuery Dokuementation verwesen. Dort werdet ihr sicher (noch) schlauer.

Ich denke hier werden dann demnächst noch weitere Tipps & Tricks in Sachen jQuery auftauchen.
